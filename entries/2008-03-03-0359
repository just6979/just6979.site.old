date: 2008-03-03
author: justin
time: 0359
title: Idea for a New Filing Layout

<p>I decided the FreeBSD file system hierarchy could use a refresh.</p><p>Here's it is, work in progress. I'm trying to logically seperate out bits as see from various steps in the boot process and building the system. I'd like most of the core and base system to be mounted read-only unless you're specifically updating things.</p><h3>Volumes in mass storage</h3><dl><dt>/boot</dt><dd> Enough to find and load a kernel and modules.  It remains much as is. Should be large enough to hold a few different kernels and their modules, ie: kernel, kernel.generic, kernel.tiny, kernel.old; 128-256 MB is more than enough. Only mounted read/write when updating.</dd><dt>/core</dt><dd>Minimal core and init system, basically /bin, /sbin, /etc/rc*. Enough to get you a shell, utilities like mount and fsck, and control of the init system. If we build it dynamically linked, we'll have to put the loader here are well, instead of /rescue. 128-256 MB should be sufficient. Only mounted read/write when updating.</dd><dt>/world</dt><dd>The base system. Along with /boot and /core, this is the world in 'make buildworld'. What would be in /usr, that isn't /usr/home, /usr/local and /usr/ports. /world/src contains it own sources, plus /core and /boot sources, laid out similar to how /usr/src is currently. 1-2 GB will give plenty of room even to do a build. Could easily be a network file system.</dd><dt>/ports</dt><dd>The ports tree in /ports/src, the rest of /usr/local as is.  I have 261 (of over 18,000) ports installed, and use less than 1 GB, but this should big a large as secondarily possible. Could be a network file system to provide a consistent environment to an entire group. /ports/src is a definite candidate for remoting.</dd><dt>/home</dt><dd>Obvious, just move it completely out of /usr. Also home directories for daemons/servers. Example: /home/postgres is to /usr/local/pgsql. Make it large, it's all your "data" that all your "programs" work with. Using GUIDs/UUIDs, you could register a portable storage device (thumbdrive, ipod, etc) to be mounted over or in place of a user's normal home when it is detected.</dd><dt>/log</dt><dd>Basically /var/log. Could use logfs or similar. Should add automated log rotation scripts to core. Size depends on how active the machine is and how much you wanted buffered between being archived or flushed. Could potentially be volatile if long lived logs aren't needed and storage is at a premium.</dd></dl><h3>Volumes in storage or memory</h3><dl><dt>/tmp</dt><dd>Same mostly, globally writable, sticky bits set. Scratch space for all users to dump semi-temporary data. May be a memory file system, hence may be volatile, ie: won't survive a reboot.</dd></dl><h3>Volumes in memory</h3><dl><dt>/var></dt><dd>I always though of /var as "variable" storage, for things like PIDs, pipes, sockets, caches and such. Anything volatile, anything that isn't valid through a reboot, would be here. Likely will be a memory file system.</dd><dt>/proc, /dev</dt><dd>As they are now, /dev with devfs or udev of course</dd></dl>