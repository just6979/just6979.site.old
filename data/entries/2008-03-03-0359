date: 2008-03-03
author: justin
time: 0359
title: Idea for a New Filing Layout

<p>I decided the FreeBSD (or NetBSD or OpenBSD) file system hierarchy could use a refresh.</p><p>Here's it is, work in progress. I'm trying to logically separate out bits as seen from various steps of the boot process and of building a production system. Perhaps someday I'll try building a system using this heirachy. I think FreeBSD is easily flexible enough to make it not hard to do.</p><h3>Volumes in Mass Storage</h3><dl><dt>/core</dt><dd>Minimal system to get the machine booted. bootloader, kernel, init system, and core binaries. Basically the existing /boot, /bin, /sbin, /etc/rc*. Enough to get you a shell, utilities like mount and fsck, and control of the init system. If we build it dynamically linked, we'll have to put the dynamic loader here are well, instead of using a /rescue. 256-512 MB should be sufficient for a few kernels and their modules. Only mounted read/write when updating.</dd><dt>/world</dt><dd>Base system. Along with and /core, this is the world in 'make buildworld'. Consists of what is currently in /usr, that isn't /usr/home, /usr/local and /usr/ports. Core and world sources are in /world/src, laid out similar to how /usr/src is currently. 1-2 GB will give plenty of room, including enough to do a build.</dd><dt>/ports</dt><dd>The ports tree is in /ports/src. Most of the rest of /usr/local as is: /ports/bin = /usr/local/bin, /ports/etc = /usr/local/etc. /var/db would be moved to /ports/db. I have ~260 (of 18,000+) ports installed (though no GUI) and use less than 1 GB, but in general this should be at least a few GB to have room for building ports. Could be a network file system to provide a consistent environment to an entire group.</dd><dt>/data</dt><dd>Contains data directories for daemons/servers. For example: /data/pgsql is what was /usr/local/pgsql, /data/www is Apache's DocRoot. Make it large, it's all your "data" that all your "programs" work with.</dd><dt>/home</dt><dd>Obvious, just move it completely out of /usr. Using GUIDs/UUIDs, you could register a portable storage device (thumbdrive, ipod, etc) to be mounted over or in place of a user's normal home when it is detected, for portable home directories.</dd></dl><h3>Volumes in Mass Storage or in Memory</h3><dl><dt>/log</dt><dd>Basically /var/log. Could use logfs or similar. Should add automated log rotation scripts to core. Size depends on how active the machine is and how much you wanted buffered between being archived or flushed. Could potentially be volatile if long lived logs aren't needed and storage is at a premium.</dd><dt>/tmp</dt><dd>Same as is, globally writable, sticky bits set. Scratch space for all users to dump semi-temporary data. May be a memory file system, hence it may be volatile and won't survive a reboot. /var/tmp and /world/tmp should be soft-linked to here to help keep out of control processes from filling either of those volumes.</dd></dl><h3>Volumes in Memory</h3><dl><dt>/var</dt><dd>I always though of /var as "variable" storage, for things like PIDs, pipes, sockets, caches and such. Anything volatile, anything that definitely isn't valid through a reboot, would be here.</dd><dt>/proc, /dev</dt><dd>As they are now.</dd></dl><p>There are some pieces of the existing system that still may need to be moved around, but I think everything can find a place in this system. I feel the separation of volumes can provide extra security and robustness. By keeping /core mounted read-only, there is less chance that something may get overwritten accidentally and prevent a boot. Solidly separating out /ports, /data, and /home allows you to completely clean and reinstall the base system (/core and /world) while keeping 3rd party applications and all application and user data intact.</p>